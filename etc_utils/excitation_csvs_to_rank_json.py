"""
gets csv_folder generated by extract_se_excitations.py
stage_i_block_j_SE.csv files
and makes ranks.json in the csv_folder, which can be used in set_se_actfn_to_json.py
"""

import glob
import json
import os
from collections import namedtuple

import numpy as np
import pandas as pd

from util.string_utils import grab_str_between_pre_suf


def get_representatives(csv_file):
    df = pd.read_csv(csv_file, index_col=[0])

    std = df.std()
    std_list = np.array(std)
    std_mean = std_list.mean()
    representative_val = std_mean

    return representative_val


if __name__ == '__main__':
    # graphmaker = []
    import argparse

    parser = argparse.ArgumentParser(description="FIFO Tester.")
    parser.add_argument('--csv_folder', required=True, type=str, help="Folder name of csv files")
    args = parser.parse_args()

    csv_folder = args.csv_folder
    print("processing ", csv_folder)

    csv_files = glob.glob(os.path.join(csv_folder, "*.csv"), recursive=True)

    representative_tuple = namedtuple("rep_tup", ['representative_val', 'stage_i', 'block_i'])
    rep_tup_list = []
    for csv_file in csv_files:
        representative_val = get_representatives(csv_file)

        stage_i = int(grab_str_between_pre_suf(csv_file, 'stage', '_'))
        block_i = int(grab_str_between_pre_suf(csv_file, 'block', '_'))
        rep_tup_list.append(representative_tuple(representative_val, stage_i, block_i))

    rep_tup_list.sort()

    ## save ranks
    rep_dict_list = []
    for i, rep_tup in enumerate(rep_tup_list):
        rep_dict = rep_tup._asdict()
        rep_dict_list.append(rep_dict)
    json_filename = os.path.join(csv_folder, 'ranks.json')
    json.dump(rep_dict_list, open(json_filename, "w"), indent=4)
